# -*- coding: utf-8 -*-
"""
Functions for plotting
"""

import numpy as np
import pandas as pd
import Functions as f 
import matplotlib.pyplot as plt

# style sheet

plt.rcParams.update({
    'text.usetex': False,
    'font.family': 'roman',
})

# #handle graph formatting and style
plt.style.use('shendrukGroupStyle')
import shendrukGroupFormat as ed

def plot(config_path, data, output_path, save = False):
    '''
    Plot trajectory generated by bacplot.
    '''

    # get constants related to the data file
    constants = f.read_config(config_path)
    
    R = float(constants[4])
    r = float(constants[5])
    H = float(constants[6])
    
    #print(R, r, H)
    
    # read in output from bacstroke
    df = np.array(pd.read_csv(data, sep=',', header = None))
    
    x_coords = df[:, 0]
    y_coords = df[:, 1]
    z_coords = df[:, 2]
    time = df[:, 3]
    
    no_plot = 3
    
    fig, ax = plt.subplots(1, 3, figsize = (18, 6.5), sharey = True) # 18 6.5 gives square look for the panels
    
    # first panel y v z positional coordinates
    ax[0].scatter(z_coords[::no_plot], y_coords[::no_plot])
    ax[0].set_xlabel('z')
    ax[0].set_ylabel('y')
    
    # second panel y v x coordinates
    ax[1].scatter(x_coords[::no_plot], y_coords[::no_plot], zorder = 100)
    ax[1].set_xlabel('x')
    
    # outer circle patch
    cir = plt.Circle((0, 0), R, facecolor='#c7c7c7', alpha=1, linewidth=3, linestyle='--', edgecolor='black')#color='darkorange',fill=False)
    ax[1].add_patch(cir)
    
    # inner circle patch
    cir2 = plt.Circle((0, 0), r, facecolor='white', alpha=1, linewidth=3, linestyle='--', edgecolor='black')#color='darkorange',fill=False)
    ax[1].add_patch(cir2)
    
    # third panel y v time
    ax[2].scatter(time[::no_plot], y_coords[::no_plot])
    ax[2].set_xlabel('t  (s)')
    
    plt.show()
    
    if save == True:
        plt.savefig(output_path)
        
def rotated_plot(config_path, data, output_path, save = False):
    '''
    Plots raw coordinates side by side with the rotated version of the coordinates.
    '''
    
    # get constants related to the data file
    constants = f.read_config(config_path)
    
    # rotation rate
    RPM = float(constants[3]) # rotation rate in RPM
    omega = RPM*2*np.pi/60# rotation rate in rad/s
    print(omega)
    
    # clinostat dimensions
    R = float(constants[4])
    r = float(constants[5])
    H = float(constants[6])
    
    # read in output from bacstroke
    df = np.array(pd.read_csv(data, sep=',', header = None))
    
    x_coords = df[:, 0]
    y_coords = df[:, 1]
    z_coords = df[:, 2]
    time = df[:, 3]
    
    # angle to rotate positions by
    theta = -1*omega*time # -1 for a negative rotation
    print(theta)
    
    costheta = np.cos(theta)
    sintheta = np.sin(theta)
    
    # rotated x and y positions, z is not effected by the rotation.
    rotx = (x_coords*costheta) - (y_coords*sintheta)
    roty = (x_coords*sintheta) + (y_coords*costheta)  
    
    fig, ax = plt.subplots(1, 2, figsize = (18, 9), gridspec_kw={'width_ratios': [1, 1]})
    
    scatter0 = ax[0].scatter(rotx, roty, zorder = 20, c=time, cmap = 'coolwarm')
    ax[0].plot(rotx[0], roty[0], zorder = 100, color = 'pink')
    
    # outer circle patch
    cir = plt.Circle((0, 0), R, facecolor='#c7c7c7', alpha=1, linewidth=3, linestyle='--', edgecolor='black')#color='darkorange',fill=False)
    ax[0].add_patch(cir)
    
    # inner circle patch
    cir2 = plt.Circle((0, 0), r, facecolor='white', alpha=1, linewidth=3, linestyle='--', edgecolor='black')#color='darkorange',fill=False)
    ax[0].add_patch(cir2)
    
    # ax[1].scatter(rotx, roty, zorder = 20)
    # ax[1].plot(rotx[0], roty[0], zorder = 100, color = 'pink')
    
    # Plot the second subplot with a color bar
    scatter = ax[1].scatter(rotx, roty, zorder=20, c=time, cmap = 'coolwarm')
    ax[1].plot(rotx[0], roty[0], 'rX', zorder = 1000) # highlight first point, to see direction of movement
    
    # Add a color bar to the second plot
    cbar = plt.colorbar(scatter, ax=ax[1], fraction = 0.046, pad = 0.04)
    cbar.set_label('Time, t (s)')
    
    plt.show()
    

def plot_multi_trajectories(config_paths, data, output_path):
    '''
    Plots multiple trajectories on the same plot. Plot assumes that all
    data sets have been run in the same size of clinostat.
    
    Rotated trajectories are plotted also

    Parameters
    ----------
    config_paths : Numpy array
        Absolute path to config files corresponding to data sets in data.
    data : Numpy array
        Absolute path to data files corresponding to the config files.
    output_path : string
        Absolute path to where the figure should be saved.
    '''
    
    no_configs = len(config_paths)
    
    # array for constants
    RPM = np.zeros(no_configs)
    
    for i in range(no_configs):
        
        # get constants related to the data file
        constants = f.read_config(config_paths[i])  # Correctly index the config_paths
        
        # get rotation rate
        RPM[i] = float(constants[3])
    
    # convert RPM to omega    
    omega = RPM * 2 * np.pi / 60
    
    # clinostat dimensions
    R = float(constants[4])
    r = float(constants[5])
    
    # set up plot
    fig, ax = plt.subplots(1, 2, figsize=(18, 9))  # No need for ax[0] since it's a single plot

    # titles
    ax[0].title.set_text('Lab Frame')
    ax[1].title.set_text('Rotated Frame')

    # outer circle patch
    cir = plt.Circle((0, 0), R, facecolor='#c7c7c7', alpha=1, linewidth=3, linestyle='--', edgecolor='black')
    ax[0].add_patch(cir)
    
    # inner circle patch
    cir2 = plt.Circle((0, 0), r, facecolor='white', alpha=1, linewidth=3, linestyle='--', edgecolor='black')
    ax[0].add_patch(cir2)
    
    # outer circle patch
    cir = plt.Circle((0, 0), R, facecolor='#c7c7c7', alpha=1, linewidth=3, linestyle='--', edgecolor='black')
    ax[1].add_patch(cir)
    
    # inner circle patch
    cir2 = plt.Circle((0, 0), r, facecolor='white', alpha=1, linewidth=3, linestyle='--', edgecolor='black')
    ax[1].add_patch(cir2)

    # read in and plot each dataset
    for j in range(len(data)):
        
        df = np.array(pd.read_csv(data[j], sep=',', header=None))  # Correctly index the data
        
        # extract relevant coordinates
        x_coords = df[:, 0]
        y_coords = df[:, 1]
        time = df[:, 3]
        
        # plot dataset
        ax[0].scatter(x_coords[::20], y_coords[::20], label=f'{omega[j]:.4f}')
        
        # angle to rotate positions by
        theta = -1*omega[j]*time # -1 for a negative rotation
        print(theta)
        
        costheta = np.cos(theta)
        sintheta = np.sin(theta)
        
        # rotated x and y positions, z is not effected by the rotation.
        rotx = (x_coords*costheta) - (y_coords*sintheta)
        roty = (x_coords*sintheta) + (y_coords*costheta)
        
        # plot rotated coordinates in panel 2
        ax[1].scatter(rotx[::20], roty[::20], label=f'{omega[j]:.4f}')
        
        
    
    plt.legend(title = '$\omega$ (rad s$^{-1}$)')
    plt.savefig(output_path)
    
def plot_multi_trajectories_3panel(config_paths, data, output_path):
    '''
    Plots multiple trajectories on the same plot. Plot assumes that all
    data sets have been run in the same size of clinostat.
    
    Rotated trajectories are plotted also. A third panel is included to look
    at the rotated trajectories without the size comparison to the clinostat.

    Parameters
    ----------
    config_paths : Numpy array
        Absolute path to config files corresponding to data sets in data.
    data : Numpy array
        Absolute path to data files corresponding to the config files.
    output_path : string
        Absolute path to where the figure should be saved.
    '''
    
    no_configs = len(config_paths)
    
    # array for constants
    RPM = np.zeros(no_configs)
    
    for i in range(no_configs):
        
        # get constants related to the data file
        constants = f.read_config(config_paths[i])  # Correctly index the config_paths
        
        # get rotation rate
        RPM[i] = float(constants[3])
        #print(RPM[i])
    
    # convert RPM to omega    
    omega = RPM * 2 * np.pi / 60
    
    # clinostat dimensions
    R = float(constants[4])
    r = float(constants[5])
    g = float(constants[8])
    
    # set up plot
    fig, ax = plt.subplots(1, 3, figsize=(28, 9))  # No need for ax[0] since it's a single plot

    # titles and formatting
    ax[0].set_title('Lab Frame', fontsize = 50)
    ax[1].set_title('Rotated Frame', fontsize = 50)
    ax[2].set_title('Rotated Frame', fontsize = 50)
    

    
    #ax[1].sharey(ax[0])
    
    ax[1].set(yticklabels=[]) 
    
    plt.subplots_adjust(wspace=0.02)
    
    # axis labels
    ax[0].set_ylabel('y', fontsize = 45)
    ax[0].set_xlabel('x', fontsize = 45)
    ax[1].set_xlabel('x', fontsize = 45)
    ax[2].set_ylabel('y\'', fontsize = 45)
    ax[2].set_xlabel('x\'', fontsize = 45)
    
    ax[2].grid(zorder = -1000)
    
    #ax[2].set_xscale('log')

    # outer circle patch
    cir = plt.Circle((0, 0), R, facecolor='#c7c7c7', alpha=1, linewidth=3, linestyle='--', edgecolor='black')
    ax[0].add_patch(cir)
    ax[0].set_title('Lab Frame', fontsize = 50)
    
    # inner circle patch
    cir2 = plt.Circle((0, 0), r, facecolor='white', alpha=1, linewidth=3, linestyle='--', edgecolor='black')
    ax[0].add_patch(cir2)
    
    # outer circle patch
    cir = plt.Circle((0, 0), R, facecolor='#c7c7c7', alpha=1, linewidth=3, linestyle='--', edgecolor='black')
    ax[1].add_patch(cir)
    
    # inner circle patch
    cir2 = plt.Circle((0, 0), r, facecolor='white', alpha=1, linewidth=3, linestyle='--', edgecolor='black')
    ax[1].add_patch(cir2)
    
    legend_handles = [] # 

    # read in and plot each dataset
    for j in range(len(data)):
        
        df = np.array(pd.read_csv(data[j], sep=',', header=None))  # Correctly index the data
        
        # extract relevant coordinates
        x_coords = df[:, 0]
        y_coords = df[:, 1]
        time = df[:, 3]
        
        # plot dataset
        ax[0].scatter(x_coords[::20], y_coords[::20], zorder = no_configs-j, label = f'{f.round_to_first_non_zero(omega[j])}')#label=f'{omega[j]:.4f}')
        
        # angle to rotate positions by
        theta = -1*omega[j]*time # -1 for a negative rotation
        
        costheta = np.cos(theta)
        sintheta = np.sin(theta)
        
        # rotated x and y positions, z is not effected by the rotation.
        rotx = (x_coords*costheta) - (y_coords*sintheta)
        roty = (x_coords*sintheta) + (y_coords*costheta)
        
        # plot rotated coordinates in panel 2
        ax[1].scatter(rotx[::20], roty[::20], label = f'{f.round_to_first_non_zero(omega[j])}')#label=f'{omega[j]:.4f}')
        
        # shift rotated coordinates for loops to be centered on 0
        
        # predicted size of loops in rotated frame
        r_loop = (5.88e-8)/omega[j]
        print(r_loop)
        
        # shift rotated x and scale x and y by r_loop
        rotx_shift = (rotx[::20] - (rotx[0]-r_loop))/r_loop
        roty_shift = roty[::20]/r_loop
        
        s = 120
        
        if j == 1:
            s = 20
        
        # scatter shifted coordinates in rotating frame
        scatter_plot = ax[2].scatter(rotx_shift, roty_shift, zorder=no_configs-j, s=s, label=f'{f.round_to_first_non_zero(omega[j])}')
    
        # get colour from scatter_plot
        color = scatter_plot.get_facecolor()[0]  
    
        # create legend handles
        legend_handles.append(ax[2].scatter([], [], s=100, label=f'{f.round_to_first_non_zero(omega[j])}', color=color))

    # Add the legend with the custom handles and uniform marker sizes
    plt.legend(handles=legend_handles, title='$\omega$ (rad/s)', fontsize=30, title_fontsize=40, loc='upper left', bbox_to_anchor=(1.05, 1))
    plt.savefig(output_path, dpi = 600)
    plt.show()
        
    
    
    

#plot('C:/Users/kenzi/Documents/Masters/Summer/test_config.txt', 'output.csv', 'PositionPanel.png')

# # rotated_plot('test_config.txt', 'output.csv', 'PositionPanel.png', save = False)

# # test_config = np.array([r'C:\\Users\kenzi\Documents\Masters\Summer\omega=0.0001_config.txt', r'C:\\Users\kenzi\Documents\Masters\Summer\omega=0.001_config.txt'])
# # datssets = np.array([r'C:\\Users\kenzi\Documents\Masters\Summer\omega=0.0001.csv', r'C:\\Users\kenzi\Documents\Masters\Summer\omega=0.001.csv'])

# test_config = np.array([r'C:\\Users\\kenzi\\Documents\\Masters\\Summer\\omega=0.0001_config.txt',
#                         r'C:\\Users\\kenzi\\Documents\\Masters\\Summer\\omega=0.001_config.txt'])
# datasets = np.array([r'C:\\Users\\kenzi\\Documents\\Masters\\Summer\\omega=0.0001.csv',
#                      r'C:\\Users\\kenzi\\Documents\\Masters\\Summer\\omega=0.001.csv'])

# #plot_multi_trajectories(test_config, datasets, 'test_plot.png')







